// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SimpleBank {
    mapping(address => uint256) private balances;
    address public owner;

    constructor() {
        owner = msg.sender;
    }

    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than zero");
        balances[msg.sender] += msg.value;
    }

    function withdraw(uint256 amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance");

        uint256 initialBalance = balances[msg.sender];
        balances[msg.sender] -= amount;
        payable(msg.sender).transfer(amount);

        assert(balances[msg.sender] == initialBalance - amount);
    }

    function transfer(address recipient, uint256 amount) public {
        require(recipient != address(0), "Recipient address cannot be zero");
        require(balances[msg.sender] >= amount, "Insufficient balance");

        uint256 senderInitialBalance = balances[msg.sender];
        uint256 recipientInitialBalance = balances[recipient];
        
        balances[msg.sender] -= amount;
        balances[recipient] += amount;

        assert(balances[msg.sender] == senderInitialBalance - amount);
        assert(balances[recipient] == recipientInitialBalance + amount);
    }

    function checkBalance() public view returns (uint256) {
        return balances[msg.sender];
    }

    function emergencyWithdraw(uint256 amount) public {
        if (msg.sender != owner) {
            revert("Only the owner can perform emergency withdrawal");
        }
        require(address(this).balance >= amount, "Insufficient contract balance");

        payable(owner).transfer(amount);
    }
}
