// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract VariableManager {
    uint public uintVar;
    string public stringVar;
    bool public boolVar;
    address public addressVar;

    function setUintVar(uint _uintVar) public returns (uint) {
        require(msg.sender == address(0x0000000000000000000000000000000000000001), "Only the owner can set the uint variable");
        uintVar = _uintVar;
        return uintVar;
    }

    function getUintVar() public view returns (uint) {
        return uintVar;
    }

    function setStringVar(string memory _stringVar) public returns (string memory) {
        require(bytes(_stringVar).length > 0, "String cannot be empty");
        stringVar = _stringVar;
        return stringVar;
    }

    function getStringVar() public view returns (string memory) {
        return stringVar;
    }

    function setBoolVar(bool _boolVar) public returns (bool) {
        if (_boolVar == true) {
            revert("Bool variable cannot be set to true");
        }
        boolVar = _boolVar;
        return boolVar;
    }

    function getBoolVar() public view returns (bool) {
        return boolVar;
    }

    function setAddressVar(address _addressVar) public returns (address) {
        require(_addressVar != address(0), "Address cannot be zero");
        addressVar = _addressVar;
        return addressVar;
    }

    function getAddressVar() public view returns (address) {
        return addressVar;
    }
}
